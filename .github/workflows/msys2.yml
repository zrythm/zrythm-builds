name: MSYS2 UCRT64
on:
  push:
    branches: [ master, nightlies ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Run the build with tmate debugging enabled (https://github.com/marketplace/actions/debugging-with-tmate)'
        required: false
        default: false

jobs:
  build:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v2
      - uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: >-
            git
            zip
            unzip
            base-devel
            tree
            guile
            libguile-devel
            mingw-w64-i686-ccache
            mingw-w64-i686-toolchain
            mingw-w64-i686-fluidsynth
            mingw-w64-i686-libogg
            mingw-w64-ucrt-x86_64-ccache
            mingw-w64-ucrt-x86_64-toolchain
            mingw-w64-ucrt-x86_64-libsamplerate
            mingw-w64-ucrt-x86_64-fftw
            mingw-w64-ucrt-x86_64-boost
            mingw-w64-ucrt-x86_64-ffmpeg
            mingw-w64-ucrt-x86_64-libyaml
            mingw-w64-ucrt-x86_64-libsndfile
            mingw-w64-ucrt-x86_64-rubberband
            mingw-w64-ucrt-x86_64-dlfcn
            mingw-w64-ucrt-x86_64-SDL2
            mingw-w64-ucrt-x86_64-graphviz
            mingw-w64-ucrt-x86_64-fluidsynth
            mingw-w64-ucrt-x86_64-cantarell-fonts
            mingw-w64-ucrt-x86_64-gtksourceview5
            mingw-w64-ucrt-x86_64-gcc
            mingw-w64-ucrt-x86_64-make
            mingw-w64-ucrt-x86_64-binutils
            mingw-w64-ucrt-x86_64-cmake
            mingw-w64-ucrt-x86_64-python-setuptools
            mingw-w64-ucrt-x86_64-jack2
            mingw-w64-ucrt-x86_64-lilv
            mingw-w64-ucrt-x86_64-ninja
            mingw-w64-ucrt-x86_64-python-pip
            mingw-w64-ucrt-x86_64-meson
            mingw-w64-ucrt-x86_64-python3
            mingw-w64-ucrt-x86_64-gtk-doc
            mingw-w64-ucrt-x86_64-gi-docgen
            mingw-w64-ucrt-x86_64-graphene
            mingw-w64-ucrt-x86_64-pango
            mingw-w64-ucrt-x86_64-toolchain
            mingw-w64-ucrt-x86_64-adwaita-icon-theme
            mingw-w64-ucrt-x86_64-curl-winssl
            mingw-w64-ucrt-x86_64-pcre
            mingw-w64-ucrt-x86_64-pcre2
            mingw-w64-ucrt-x86_64-xxhash
            mingw-w64-ucrt-x86_64-vamp-plugin-sdk
            mingw-w64-ucrt-x86_64-json-glib
            mingw-w64-ucrt-x86_64-iconv
            mingw-w64-ucrt-x86_64-libsoxr
            mingw-w64-ucrt-x86_64-lv2
            mingw-w64-ucrt-x86_64-graphene
            mingw-w64-ucrt-x86_64-libsass
            mingw-w64-ucrt-x86_64-sassc

      - name: Fetch repos and files
        run: |
          cd /c
          mkdir src
          cd src
          pwd
          git clone https://gitlab.zrythm.org/zrythm/zrythm
          git clone https://gitlab.zrythm.org/zrythm/zrythm-builds
          git clone https://gitlab.zrythm.org/zrythm/zrythm-installer
          git clone https://github.com/KDE/breeze-icons
          git clone https://github.com/mesonbuild/meson
          #wget https://www.zrythm.org/downloads/inno-setup-bin.zip
          #unzip inno-setup-bin.zip -d ~/
      - name: Install AWSCLI
        run: |
          /ucrt64/bin/pip install awscli pip-system-certs

      - name: restore ccache
        uses: actions/cache@v3
        with:
          #path: C:/msys64/home/runneradmin/.ccache
          path: D:/a/_temp/msys64/home/runneradmin/.ccache
          key: msys2-ccache-${{ github.run_id }}
          restore-keys: |
            msys2-ccache

      - name: configure ccache
        run: |
          which ccache
          test -d ~/.ccache || mkdir -p ~/.ccache
          echo "max_size = 4.0G" > ~/.ccache/ccache.conf
          echo "compression = true" >> ~/.ccache/ccache.conf
          ccache -sv

      - name: certs workaround
        run: |
          # FIXME: Python fails to validate github.com SSL certificate, unless we first
          # run a dummy download to force refreshing Windows' CA database.
          # See: https://bugs.python.org/issue36137
          curl https://github.com
          curl https://gitlab.zrythm.org
          #certutil -generateSSTFromWU roots.sst && certutil -addstore -f root roots.sst && del roots.sst

      # Use the following to inject a tmate session to SSH and debug
      # things
      - name: Setup tmate session
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true
          detached: true

      - name: Build and deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          REMOTE_IP: ${{ secrets.REMOTE_IP }}
          REMOTE_HOME: ${{ secrets.REMOTE_HOME }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          eval `ssh-agent -s -a /tmp/.ssh-socket`
          ssh-add - <<< "${SSH_PRIVATE_KEY}"
          cd /c/src
          MESON_PATH=/ucrt64/bin/meson NINJA_PATH=/ucrt64/bin/ninja AWS_CLI_PATH=/ucrt64/bin/aws zrythm-builds/scripts/make-pkg.sh windows-msys windows-msys-prepare
          MESON_PATH=/ucrt64/bin/meson NINJA_PATH=/ucrt64/bin/ninja AWS_CLI_PATH=/ucrt64/bin/aws zrythm-builds/scripts/make-pkg.sh windows-msys
          AWS_CLI_PATH=/ucrt64/bin/aws zrythm-builds/scripts/push-pkg.sh windows-msys
