#! /bin/bash
#
# Copyright (C) 2020 Alexandros Theodotou <alex at zrythm dot org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

if [ -f ~/.env ]; then
  source ~/.env
fi

set -euo pipefail

if [[ "$distro" = "osx" ]] || [[ "$distro" = "windows10-msys" ]] || [[ "$distro" = "osx-brew-zip" ]]; then
  ssh_opts="-o StrictHostKeyChecking=no -i $id_rsa_path"
  echo "using id_rsa"
else
  ssh_opts="-o StrictHostKeyChecking=no"
  echo "not using id_rsa"
fi

if [[ "$distro" = "osx" ]] || [[ "$distro" = "osx-brew-zip" ]]; then
  sed_cmd=gsed
else
  sed_cmd=sed
fi

set +u
if [ "$AWS_CLI_PATH" = "" ]; then
  aws_cli=aws
else
  aws_cli="$AWS_CLI_PATH"
fi
set -u

distros="archlinux debian11 debian12 fedora34 fedora35 ubuntu2004 ubuntu2110 gnu-linux"
linguas="en de fr it ja pt"
sendowl_bucket_name="sendowl-bucket"
sendowl_bucket_url="s3://$sendowl_bucket_name"
rsync_cmd="rsync --rsh=\"ssh $ssh_opts\""
ssh_cmd="ssh -q $ssh_opts"
scp_cmd="scp $ssh_opts"
remote_ip="$REMOTE_IP"
remote_home="$REMOTE_HOME"
set +e
pushd zrythm
git describe --tags --exact-match && true || false
_is_tag=$?
popd
set -e
# alpha.
zrythm_pkg_ver=$(cd zrythm && printf '%s' "$(git describe --tags | $sed_cmd -e 's/-\([0-9]\+\)/\.r\1/' | $sed_cmd 's/v//g' | $sed_cmd 's/-/\./g')")
# alpha- (SemVer compatible)
zrythm_pkg_semver=$(cd zrythm && printf '%s' "$(git describe --tags | $sed_cmd -e 's/-\([0-9]\+\)/\.r\1/' | $sed_cmd 's/v//g' | $sed_cmd 's/-/XXXXXX/' | $sed_cmd 's/-/\./' | $sed_cmd 's/XXXXXX/-/')")
gnu_linux_zip_filename="zrythm-$zrythm_pkg_ver-installer.zip"
gnu_linux_zip_trial_filename="zrythm-trial-$zrythm_pkg_ver-installer.zip"

is_tag () {
  (( $_is_tag == 0 )) && true || false
}

distro_to_pkg_type () {
  distro=$1
  case "$distro" in
    "archlinux")
      echo "ARCH"
      ;;
    "debian"* | "ubuntu"* )
      echo "DEBIAN"
      ;;
    "fedora"*)
      echo "FEDORA"
      ;;
    "windows10")
      echo "WINDOWS"
      ;;
    "windows10-msys")
      echo "WINDOWS_MSYS"
      ;;
    "osx" | "macos"*)
      echo "OSX"
      ;;
    "osx-brew-zip")
      echo "OSX_BREW_ZIP"
      ;;
    "gnu-linux")
      echo "GNU_LINUX"
      ;;
    "appimage")
      echo "APPIMAGE"
      ;;
  esac
}

get_package_filename () {
  distro=$1
  set +u
  trial=$2
  set -u
  printf '%s' \
    $(zrythm-installer/build/scripts/get_pkg_filename_from_distro.sh $distro $trial)
}

# returns if the file exists in the remote home dir
remote_file_exists () {
  >&2 echo "checking if remote file $1 exists..."
  "$aws_cli" s3 ls "$sendowl_bucket_url/$1" > out.log 2> err.log
  #$ssh_cmd $remote_ip [ -f "$remote_home/$1" ] > out.log 2> err.log
}

# returns if the directory exists in the remote home dir
remote_dir_exists () {
  >&2 echo "checking if remote dir $1 exists..."
  "$aws_cli" s3 ls "$sendowl_bucket_url/$1" > out.log 2> err.log
  #$ssh_cmd $remote_ip [ -d "$remote_home/$1" ] > out.log 2> err.log
}

# whether a package exists on the server
remote_pkg_exists () {
  distro=$1
  set +u
  trial=$2
  set -u
  >&2 echo "checking if remote package for $distro exists $(get_package_filename $distro $trial)..."
  if remote_file_exists packages/$distro/$(get_package_filename $distro $trial) ; then
    >&2 echo "exists"
    true
  else
    >&2 echo "doesn't exist"
    false
  fi
}

fetch_file () {
  from_file="$1"
  to_file="$2"
  "$aws_cli" s3 cp "$sendowl_bucket_url/$from_file" "$to_file" > out.log 2> err.log
}

send_file () {
  from_file="$1"
  to_file="$2"
  "$aws_cli" s3 cp "$from_file" "$sendowl_bucket_url/$to_file" > out.log 2> err.log
}

add_file_tag () {
  uploaded_file="$1"
  tag_key="$2"
  tag_value="$3"
  "$aws_cli" s3api put-object-tagging \
    --bucket $sendowl_bucket_name \
    --key "$uploaded_file" \
    --tagging '{"TagSet": [{ "Key": "'"$tag_key"'", "Value": "'"$tag_value"'" }]}' > out.log 2> err.log
}

should_skip_packaging () {
  distro=$1
  ! is_tag && remote_pkg_exists "$distro"
}

join_by () {
  local IFS="$1"; shift; echo "$*";
}
