#! /bin/bash
#
# Copyright (C) 2020 Alexandros Theodotou <alex at zrythm dot org>

set -euo pipefail

if [[ "$distro" = "osx" ]]; then
  ssh_opts="-o StrictHostKeyChecking=no -i $id_rsa_path"
else
  ssh_opts="-o StrictHostKeyChecking=no"
fi
echo "using ssh opts: $ssh_opts"

distros="archlinux debian10 fedora32 ubuntu1804 ubuntu1910 ubuntu2004"
linguas="en de fr"
rsync_cmd="rsync --rsh=\"ssh $ssh_opts\""
ssh_cmd="ssh -q $ssh_opts"
scp_cmd="scp $ssh_opts"
remote_ip=srht@forum.zrythm.org
remote_home=/home/srht
remote_packages=$remote_home/packages
zrythm_pkg_ver=$(cd zrythm && printf '%s' "$(git describe --tags | sed 's/-/\.r/' | sed 's/v//g' | sed 's/-/\./')")
gnu_linux_zip_filename="zrythm-$zrythm_pkg_ver-installer.zip"
gnu_linux_zip_trial_filename="zrythm-trial-$zrythm_pkg_ver-installer.zip"

is_tag () {
  [[ "$zrythm_pkg_ver" != *r* ]]
}

distro_to_pkg_type () {
  distro=$1
  case "$distro" in
    "archlinux")
      echo "ARCH"
      ;;
    "debian"* | "ubuntu"* )
      echo "DEBIAN"
      ;;
    "fedora32")
      echo "FEDORA32"
      ;;
    "windows"*)
      echo "WINDOWS"
      ;;
    "osx"* | "macos"*)
      echo "OSX"
      ;;
  esac
}

get_package_filename () {
  distro=$1
  pkg_type=$(distro_to_pkg_type $distro)
  set +u
  trial=$2
  set -u
  printf '%s' \
    $(cd zrythm-installer && make pkg$trial-filename-$pkg_type)
}

# whether the package has a separate zplugins dir
package_has_zplugins_dir () {
  [ "$distro" != "windows10" ] && [ "$distro" != "osx" ]
}

# returns if the file exists in the remote home dir
remote_file_exists () {
  $ssh_cmd $remote_ip [ -f "$remote_home/$1" ]
}

# returns if the directory exists in the remote home dir
remote_dir_exists () {
  $ssh_cmd $remote_ip [ -d "$remote_home/$1" ]
}

# whether a package exists on the server
remote_pkg_exists () {
  distro=$1
  if remote_file_exists packages/$distro/$(get_package_filename $distro) ; then
    if package_has_zplugins_dir $distro ; then
      remote_dir_exists packages/$distro/zplugins/ZSaw.lv2
    else
      true
    fi
  else
    false
  fi
}

should_skip_packaging () {
  distro=$1
  ! is_tag && remote_pkg_exists "$distro"
}
